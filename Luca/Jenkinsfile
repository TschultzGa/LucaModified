pipeline {
    agent {
        label('docker')
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(
            logRotator(
                daysToKeepStr: '7',
                numToKeepStr:'5',
                artifactDaysToKeepStr: '7',
                artifactNumToKeepStr: '5'
            )
        )
    }

    environment {
        CONTAINER = 'harbor.seamlessme.local/luca-apps/android:base'
        QUOTE = '\\"'
        C4L_SIGNING_KEY_ALIAS = 'upload'
        COMMIT_HASH = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
    }

    parameters {
        booleanParam(name: 'ReleaseToInternalTesting', defaultValue: false,
            description: 'Release the bundle to internal testing track on Google Play Store. This only works on master or release/* branches.')
        booleanParam(name: 'BuildForAllEnvironments', defaultValue: false,
            description: 'Builds APKs for all staging environments.')
        booleanParam(name: 'UploadToAppCenter', defaultValue: false,
            description: 'Build a QS APK and upload it to MS AppCenter for testing.')
    }

    stages {
        stage('Docker pull') {
            steps {
                cleanWs()
                checkout scm
                sh("docker pull ${CONTAINER}")
            }
        }
        stage('Unit Tests') {
            steps {
                sh '''
                    cd Luca
                    docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca ${CONTAINER} bash -c "cd /Luca/app; ./../gradlew :app:testDebug"
                '''
            }
        }
        stage('Sonar') {
            steps {
                withSonarQubeEnv('sonarqube-luca') {
                    sh '''
                        cd Luca
                        GENERAL_PARAMS="-PSONAR_HOST_URL=$SONAR_HOST_URL -PSONAR_AUTH_TOKEN=$SONAR_AUTH_TOKEN -PBRANCH_NAME=$BRANCH_NAME"
                        CMD="cd /Luca/app; ./../gradlew :app:sonarqube --stacktrace $GENERAL_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca ${CONTAINER} bash -c "$CMD"
                    '''
                }
            }
        }
        stage('Build Dev APK') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: "luca-staging-api-basic-auth-user-pw", usernameVariable: 'STAGING_API_USERNAME', passwordVariable: 'STAGING_API_PASSWORD'),
                ]) {
                    sh '''
                        cd Luca
                        GENERAL_PARAMS="-PCOMMIT_HASH=$QUOTE$COMMIT_HASH$QUOTE"
                        STAGING_PARAMS="-PSTAGING_API_USERNAME=$QUOTE$STAGING_API_USERNAME$QUOTE -PSTAGING_API_PASSWORD=$QUOTE$STAGING_API_PASSWORD$QUOTE"
                        CMD="cd /Luca/app; ./../gradlew :app:assembleDebug $GENERAL_PARAMS $STAGING_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca ${CONTAINER} bash -c "$CMD"
                    '''
                }
            }
        }
        stage('Build Staging APKs') {
            when {
                anyOf {
                    anyOf { branch 'release/*'; branch 'master' }
                    expression { return params.BuildForAllEnvironments }
                }
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: "luca-staging-api-basic-auth-user-pw", usernameVariable: 'STAGING_API_USERNAME', passwordVariable: 'STAGING_API_PASSWORD'),
                ]) {
                    sh '''
                        cd Luca
                        GENERAL_PARAMS="-PCOMMIT_HASH=$QUOTE$COMMIT_HASH$QUOTE"
                        STAGING_PARAMS="-PSTAGING_API_USERNAME=$QUOTE$STAGING_API_USERNAME$QUOTE -PSTAGING_API_PASSWORD=$QUOTE$STAGING_API_PASSWORD$QUOTE"
                        CMD="cd /Luca/app; ./../gradlew :app:assembleQs :app:assembleAqs :app:assembleHotfix :app:assemblePentest :app:assembleP1 :app:assembleP2 :app:assembleP3 :app:assembleDemo :app:assembleRelease :app:assemblePreprod $GENERAL_PARAMS $STAGING_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca ${CONTAINER} bash -c "$CMD"
                    '''
                }
            }
        }
        stage('Upload to AppCenter') {
            when {
                anyOf {
                    anyOf { branch 'release/*'; branch 'master'; branch 'dev' }
                    expression { return params.UploadToAppCenter }
                }
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: "luca-staging-api-basic-auth-user-pw", usernameVariable: 'STAGING_API_USERNAME', passwordVariable: 'STAGING_API_PASSWORD'),
                    string(credentialsId: 'luca-android-appcenter-token', variable: 'APPCENTER_TOKEN'),
                ]) {
                    sh '''#!/bin/bash
                        cd Luca
                        if [[ \"$BUILD_TAG\" == *"master"* ]]; then
                            TASK=":app:assembleRelease"
                            APP_VARIANT=release
                        elif [[ \"$BUILD_TAG\" == *"release"* ]]; then
                            TASK=":app:assemblePreprod"
                            APP_VARIANT=preprod
                        else
                            TASK=":app:assembleQs"
                            APP_VARIANT=qs
                        fi
                        GENERAL_PARAMS="-PCOMMIT_HASH=$QUOTE$COMMIT_HASH$QUOTE"
                        STAGING_PARAMS="-PSTAGING_API_USERNAME=$QUOTE$STAGING_API_USERNAME$QUOTE -PSTAGING_API_PASSWORD=$QUOTE$STAGING_API_PASSWORD$QUOTE"
                        CMD="cd /Luca/app; ./../gradlew $TASK $GENERAL_PARAMS $STAGING_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca ${CONTAINER} bash -c "$CMD"
                        cd .. && ./Luca/scripts/rename_output_files && cd Luca
                        CMD="cd /Luca/app; npm install -g appcenter-cli"
                        CMD="$CMD && appcenter distribute release --app culture4life/luca-Android --file build/outputs/apk/$APP_VARIANT/app-$APP_VARIANT_*.apk --group "Testers" --token $APPCENTER_TOKEN"
                        docker run --rm -v `pwd`:/Luca --entrypoint /bin/sh node:14.16.0-alpine3.13 -c "$CMD"
                    '''
                }
            }
        }
        stage('Build Production APK') {
            when { anyOf { branch 'master' } }
            steps {
                withCredentials([
                    file(credentialsId: 'luca-android-keystore', variable: 'KEYSTORE_FILE'),
                    string(credentialsId: 'luca-android-upload-key-pw', variable: 'C4L_SIGNING_KEY_PASSWORD'),
                    string(credentialsId: 'luca-android-keystore-pw', variable: 'C4L_SIGNING_STORE_PASSWORD'),
                ]) {
                    sh '''
                        cd Luca
                        GENERAL_PARAMS="-PCOMMIT_HASH=$QUOTE$COMMIT_HASH$QUOTE"
                        LOCAL_KEYSTORE_FILE=$(basename $KEYSTORE_FILE)
                        KEYSTORE_PARAMS="-PC4L_SIGNING_STORE_FILE=$LOCAL_KEYSTORE_FILE -PC4L_SIGNING_KEY_PASSWORD=$C4L_SIGNING_KEY_PASSWORD -PC4L_SIGNING_KEY_ALIAS=$C4L_SIGNING_KEY_ALIAS -PC4L_SIGNING_STORE_PASSWORD=$C4L_SIGNING_STORE_PASSWORD"
                        CMD="cd /Luca/app; ./../gradlew dependencyCheckAnalyze :app:assembleProduction $GENERAL_PARAMS $KEYSTORE_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca -v $KEYSTORE_FILE:/Luca/app/$LOCAL_KEYSTORE_FILE ${CONTAINER} bash -c "$CMD"
                    '''
                }
            }
        }
        stage('Upload to PlayStore') {
            when {
                allOf {
                    anyOf { branch 'release/*'; branch 'master' }
                    expression { return params.ReleaseToInternalTesting }
                }
            }
            steps {
                withCredentials([
                    file(credentialsId: 'luca-android-keystore', variable: 'KEYSTORE_FILE'),
                    file(credentialsId: 'c4l-play-console-service-account-json', variable: 'SERVICE_ACCOUNT_FILE'),
                    string(credentialsId: 'luca-android-upload-key-pw', variable: 'C4L_SIGNING_KEY_PASSWORD'),
                    string(credentialsId: 'luca-android-keystore-pw', variable: 'C4L_SIGNING_STORE_PASSWORD'),
                ]) {
                    sh '''
                        cd Luca
                        GENERAL_PARAMS="-PCOMMIT_HASH=$QUOTE$COMMIT_HASH$QUOTE"
                        LOCAL_KEYSTORE_FILE=$(basename $KEYSTORE_FILE)
                        KEYSTORE_PARAMS="-PC4L_SIGNING_STORE_FILE=$LOCAL_KEYSTORE_FILE -PC4L_SIGNING_KEY_PASSWORD=$C4L_SIGNING_KEY_PASSWORD -PC4L_SIGNING_KEY_ALIAS=$C4L_SIGNING_KEY_ALIAS -PC4L_SIGNING_STORE_PASSWORD=$C4L_SIGNING_STORE_PASSWORD"
                        CMD="cd /Luca/app; ./../gradlew publishProductionBundle $GENERAL_PARAMS $KEYSTORE_PARAMS"
                        docker run --rm -u $(id -u):$(id -g) -v `pwd`:/Luca -v $SERVICE_ACCOUNT_FILE:/Luca/app/service-account.json -v $KEYSTORE_FILE:/Luca/app/$LOCAL_KEYSTORE_FILE ${CONTAINER} bash -c "$CMD"
                    '''
                }
            }
        }
        stage('Archive') {
            steps {
                sh "./Luca/scripts/rename_output_files"
                archiveArtifacts artifacts: 'Luca/app/build/outputs/apk/**/*.apk, Luca/app/build/outputs/bundle/**/*.aab, Luca/app/build/reports/dependency-check-report.html', excludes: 'Luca/app/build/outputs/apk/**/*-androidTest.apk', fingerprint: true
            }
        }
    }

    post {
        always {
            junit 'Luca/app/build/test-results/**/*.xml'
            // cleanup docker
            build job: "Operations/Docker-Cleanup", wait: false
            cleanWs()
        }
    }
}
